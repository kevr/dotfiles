#!/bin/zsh

# Many of my projects have these scripts, so create nice
# aliases for them.

function version() {
    curdir="$(pwd)"
    while [[ ! -f $curdir/scripts/get_version.sh ]]; do
        if [ "$curdir" = "/" ]; then
            echo "No scripts/get_version.sh found."
            return 1
        fi
        curdir=$(readlink -f "$curdir/..")
    done

    sh $curdir/scripts/get_version.sh
}

# A simple function that produces a git string for any
# repository the prompt is currently in.
#
# Example: git:repoName/master
#
function brname() {
    if git status >/dev/null 2>&1; then
        br="$(~/.local/bin/brname)"
        echo "git%F{cyan}:%f$br "
    fi
}

function fvim() {
    vim -o `fzf`
}



function genhtml() {
    sed -i 's;fail_under;#fail_under;g' .coveragerc
    coverage report
    coverage html
    sed -i 's;#fail_under;fail_under;g' .coveragerc
    if [ "$1" = '-o' ]; then
        $BROWSER htmlcov/index.html
    fi
}

function ssh() {
    command ssh -4 "$@"
}

function py39() {
    source $(pyenv root)/versions/3.9.5/envs/venv/bin/activate
}

function pytest-cov() {
    rm -f .coverage

    coverage run --append $(which pytest) "$@"
    [[ $? -ne 0 ]] && return

    coverage html
    [[ $? -ne 0 ]] && return

    coverage report
    [[ $? -ne 0 ]] && return
}

function gslog() {
    git log --pretty=oneline "$@" | sed -r 's/\(HEAD -> .*\)//'
}

function aur-coverage() {
    ./util/fix-coverage cache/.coverage
    coverage html
    coverage report
}

function backritty() {
    screen -d -m alacritty -e tmux
    exit
}

function mpclist() {
    mpc playlist -f '%position%: %artist% - %title%' | grep "$*"
}

function aurbase() {
    export PYTHONPATH=$(pwd)/..
}

function uviaur() {
    AUR_CONFIG=/etc/aurweb/config uvicorn aurweb.asgi:app --reload --log-level debug
}

function activate() {
    source ./venv/bin/activate
}

function py_installed() {
    pip freeze
}

function aurweb-test() {
    rm -f .coverage
    AUR_CONFIG=conf/config make -C test
    coverage report
    coverage html
    firefox htmlcov/index.html
}

function glog() {
    git log --pretty=oneline "$@"
}

function _deploy() {
    if [ -f './scripts/deploy.sh' ]; then
        DEPLOY='./scripts/deploy.sh'
    elif [ -f '../scripts/deploy.sh' ]; then
        DEPLOY='../scripts/deploy.sh'
    else
        echo 'error: no $DEPLOY script found'
        return 1
    fi
    bash $DEPLOY "$@"
}

function nano_deploy() {
    export PORT='/dev/ttyUSB0'
    export PART='atmega328p'
    export PROGRAMMER='arduino'
    export BAUD=115200
    _deploy "$@"
}

function mega_deploy() {
    export PORT='/dev/ttyACM0'
    export PART='atmega2560'
    export PROGRAMMER='wiring'
    export BAUD=115200
    _deploy "$@"
}

function siglent_screenshot() {
    rm -f /tmp/siglent.bmp
    lxi screenshot /tmp/siglent.bmp \
        --address 192.168.0.91 \
        --plugin siglent-sds >/dev/null 2>&1 | grep -q '^convert-.*:'
    convert /tmp/siglent.bmp "$1"
}

function ffind() {
    find . -type f "$@"
}

function dfind() {
    find . -type d "$@"
}

function mastermerge() {
    git checkout master
    git pull origin master
    git checkout "$1"
    git merge master
    git push origin "$1"
}

function aurtest() {
    rm -f .coverage
    echo "Initializing test DB..."
    rm -f aurweb.sqlite3
    AUR_CONFIG=conf/config python3 -m aurweb.initdb
    AUR_CONFIG=conf/config coverage run $(which pytest) "$@" test
}

function aur-php-hyperfine() {
    hyperfine --warmup 10 --min-runs 500 "curl --cookie AURSID=$AURSID https://localhost:8443/packages"
}

function aur-fastapi-hyperfine() {
    hyperfine --warmup 10 --min-runs 500 "curl --cookie AURSID=$AURSID https://localhost:8444/packages"
}

function docker() {
    if [ "$1" = "build" ]; then
        command docker "$@"
        command docker image prune -f
    else
        command docker "$@"
    fi
}

function test() {
    rm -f .coverage
    pytest "$@"
}

function csv() {
    perl -pe 's/((?<=,)|(?<=^)),/ ,/g;' "$@" | column -t -s, | less  -F -S -X -K
}

function git-head() {
    git rev-parse --short HEAD
}

